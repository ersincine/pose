# Barn image set ("000020.jpg" and "000021.jpg") 
# and camera poses of Barn ("Barn_COLMAP_SfM.log") 
# can be downloaded from https://www.tanksandtemples.org/download/

# Relative camera motion:
"""
R1 = R1.reshape(3, 3)
t1 = t1.reshape(3)
R2 = R2.reshape(3, 3)
t2 = t2.reshape(3)

R = R2 @ R1.T
t = t2 - R @ t1
"""


    """
    R1:
    [[ 0.06583149  0.08370518  0.99431366]
    [ 0.07275541 -0.99422556  0.07888078]
    [ 0.99517479  0.06714886 -0.07154136]]
    R2:
    [[ 0.99869803 -0.00535244  0.05073065]
    [ 0.00546557  0.99998288 -0.00209156]
    [-0.05071858  0.00236611  0.99871018]]
    t:
    [[-0.74690693]
    [-0.05488227]
    [-0.66265977]]
    """

    """
    # R = np.array([
    #     [0.06583149, 0.08370518, 0.99431366],
    #     [0.07275541, -0.99422556, 0.07888078],
    #     [0.99517479, 0.06714886, -0.07154136]
    # ])

    # q = rotation_matrix_to_quaternion(torch.tensor(R).reshape(1, 3, 3)).reshape(4).numpy()
    # np.savetxt("q_estimated.txt", q)
print(len(kp1), len(kp2))
    # now for the q2
    R = np.array([
        [0.99869803, -0.00535244, 0.05073065],
        [0.00546557, 0.99998288, -0.00209156],
        [-0.05071858, 0.00236611, 0.99871018]
    ])

    q = rotation_matrix_to_quaternion(torch.tensor(R).reshape(1, 3, 3)).reshape(4).numpy()
    np.savetxt("q_estimated.txt", q)

    t = np.array([-0.74690693, -0.05488227, -0.66265977])
    np.savetxt("t_estimated.txt", t)
    """


"""
We do not explicitly provide the exact camera intrinsics to encourage an individual optimization of it. 
Some methods however need initial parameters like the focal length and the principal point to run. 
For this we found a pinhole camera model with the following parameters working well for both camera setups:
Principal point offset: x0 = W/2, y0 = H/2
Focal length: fx = fy = 0.7 * W

# Calculate fundamental matrix
w = 1920
h = 1080
focal_length = 0.7 * w
principal_point = (w / 2, h / 2)
K = torch.tensor([
    [focal_length, 0, principal_point[0]],
    [0, focal_length, principal_point[1]],
    [0, 0, 1]
])

E = K.T @ R @ K
F = torch.inverse(K).T @ E @ torch.inverse(K)
"""

"""

COLMAP sonuçlarına göre:
cameras tablosunda:
camera_id,model,width,height,params,prior_focal_length
1, 1, 1920, 1080, b'\x00\x00\x00\x00\x00\x00\x92@\x00\x00\x00\x00\x00\x00\x92@\x00\x00\x00\x00\x00\x00\x8e@\x00\x00\x00\x00\x00\xe0\x80@', 1

https://github.com/colmap/colmap/blob/main/src/colmap/sensor/models.h
1 numaralı model "Pinhole camera model", yani parametreler: fx, fy, cx, cy
(2 focal length, 2 principal point)
Yani kod: struct.unpack("dddd", params)
Sonuç: fx=1152.0, fy=1152.0, cx=960.0, cy=540.0
"""
